---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    release: {{ .Release.Name | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
spec:
  selector:
    matchLabels:
      app: {{ template "name" . }}
      release: {{ .Release.Name }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: kafka-producer
        release: {{ .Release.Name | quote }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    spec:
      volumes:
      - name: config-volume
        configMap:
          name: {{ template "fullname" . }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{if .Values.image.registry}}{{.Values.image.registry}}/{{end}}{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: COMPONENT
          value: "kafka-producer-perf-test"
        - name: JMX_PORT
          value: {{ .Values.jmxPort | quote }}
        - name: KAFKA_OPTS
          value: "-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.rmi.port={{.Values.jmxPort}}"
        - name: KAFKA_HEAP_OPTS
          value: {{.Values.heapOpts}}
        command:
        - sh
        - -c
        - |
          set -x
          CONFDIR=/opt/kafka-producer-perf-test/conf
          kafka-producer-perf-test \
            --topic $(cat $CONFDIR/topic) \
            --num-records $(cat $CONFDIR/num-records) \
            --record-size $(cat $CONFDIR/record-size) \
            --throughput $(cat $CONFDIR/throughput) \
            --producer-props $(cat $CONFDIR/producer-props) \
            $(cat $CONFDIR/extra-opts)
        volumeMounts:
        - mountPath: /opt/kafka-producer-perf-test/conf
          name: config-volume
        resources:
{{ toYaml .Values.resources | indent 10 }}
{{if .Values.jmxfetch.enabled}}
      - name: collocated-proxy
        image: "{{if .Values.collocatedProxy.image.registry}}{{.Values.collocatedProxy.image.registry}}/{{end}}{{.Values.collocatedProxy.image.repository}}:{{.Values.collocatedProxy.image.tag}}"
        imagePullPolicy: {{.Values.collocatedProxy.image.pullPolicy}}
        ports:
        - containerPort: {{.Values.collocatedProxy.port}}
          protocol: UDP
        env:
        - name: PORT
          value: {{.Values.collocatedProxy.port | quote}}
        - name: SELECTOR
          value: "{{.Values.collocatedProxy.selector}}"
        - name: PROTOCOL
          value: udp
        - name: NAMESPACE
          value: {{.Values.collocatedProxy.namespace}}
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      - name: jmxfetcher
        image: "{{if .Values.jmxfetch.image.registry}}{{.Values.jmxfetch.image.registry}}/{{end}}{{.Values.jmxfetch.image.repository}}:{{.Values.jmxfetch.image.tag}}"
        imagePullPolicy: {{.Values.jmxfetch.image.pullPolicy}}
        volumeMounts:
        - mountPath: /conf.d
          name: config-volume
        env:
        - name: DD_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: datadog.api.key
{{end}}
